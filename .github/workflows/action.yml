name: Build & Push Docker (GHCR)

on:
  push:
    branches: [ "master" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # ghcr.io/<owner>/<repo>
  GO_VERSION: 1.24.6

permissions:
  contents: read
  packages: write

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=ref,event=tag
            type=semver,pattern={{version}}
            # latest apenas em master
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/heads/master') }}

  build-amd64:
    runs-on: ubuntu-latest
    needs: [meta]
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      ref: ${{ steps.vars.outputs.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set vars
        id: vars
        run: echo "ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (amd64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.vars.outputs.ref }}
          labels: ${{ needs.meta.outputs.labels }}
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

  build-arm64:
    runs-on: ubuntu-latest
    needs: [meta]
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      ref: ${{ steps.vars.outputs.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set vars
        id: vars
        run: echo "ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (arm64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.vars.outputs.ref }}
          labels: ${{ needs.meta.outputs.labels }}
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  merge:
    runs-on: ubuntu-latest
    needs: [meta, build-amd64, build-arm64]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest with all final tags
        run: |
          # Junte as duas imagens tempor√°rias em cada tag final do meta
          # Ex.: ghcr.io/owner/repo:latest, :master, :<sha>, :vX.Y.Z...
          IFS=',' read -ra TAGS <<< "${{ needs.meta.outputs.tags }}"
          for TAG in "${TAGS[@]}"; do
            TAG_TRIM=$(echo "$TAG" | xargs)
            if [ -z "$TAG_TRIM" ]; then continue; fi
            docker buildx imagetools create \
              -t "$TAG_TRIM" \
              "${{ needs.build-amd64.outputs.ref }}" \
              "${{ needs.build-arm64.outputs.ref }}"
          done

      - name: Inspect (debug)
        run: |
          IFS=',' read -ra TAGS <<< "${{ needs.meta.outputs.tags }}"
          for TAG in "${TAGS[@]}"; do
            TAG_TRIM=$(echo "$TAG" | xargs)
            if [ -z "$TAG_TRIM" ]; then continue; fi
            echo "== $TAG_TRIM =="
            docker buildx imagetools inspect "$TAG_TRIM" || true
          done